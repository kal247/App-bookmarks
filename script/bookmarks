#!/usr/bin/env perl
#
# bookmarks - Export bookmarks from browsers and files.
#
# Documentation at bottom of script.
#
# Implementation Notes :
#
# - For Safari, this tool relies on dirty plist parsing using Apple's 'plutil'
#   command. It should use Mac::PropertyList instead. For performance reasons
#   when used interactively, I've decided to keep it like that (see README.md).
# - Since Firefox sets an EXCLUSIVE SQLite lock, a tmp DB file copy is used.
# - sources are read as UTF-8.
#
# 2025.01.01 v0.35 jul : use 5.014
#                        fixed exit status
#                        added CSV and HTML output format
# 2024.03.09 v0.34 jul : added support for netscape
# 2022.12.22 v0.33 jul : fixed utf8 in stdout and firefox
#                        fixed bug in POD (wrong repo URL)
#                        doc arg "-" stdin as txt
# 2022.01.10 v0.32 jul : fixed bug in txt files regex (space)
#                        fixed bug with option -a (files not existing silently dropped)
#                        added support for arg '-' (read from STDIN as plain text file)
# 2021.03.30 v0.31 jul : skip gemini.t if URI::Find not installed
# 2021.03.29 v0.30 jul : added great markdown regex by MichaÃ«l Perrin
#                        process files without extension as plain text
#                        fixed extra spaces printed after empty fields
#                        added gemini support
# 2021.02.17 v0.28 jul : fixed missing require DBD::SQLite (firefox)
# 2021.02.16 v0.27 jul : added win32 Edge support, fixed Chrome bug (localappdata), fixed win32 bug (find), more tests (firefox)
# 2021.01.31 v0.26 jul : improved handling of optional dependencies
# 2021.01.31 v0.25 jul : skip bookmarks.t if URI::Find not installed
# 2021.01.31 v0.24 jul : fixed missing prereq URI::Find in Makefile.PL
# 2021.01.23 v0.23 jul : added tests and fixed firefox default location
# 2021.01.20 v0.22 jul : fixed firefox query again
# 2020.06.29 v0.21 jul : added markdown and text files support
# 2020.03.10 v0.20 jul : fixed EXCLUSIVE SQLite lock set by Firefox
# 2019.12.22 v0.19 jul : added chrome support, require, bugfixes
# 2019.10.22 v0.17 jul : created module
# 2019.10.17 v0.16 jul : fixed firefox tags
# 2019.09.27 v0.15 jul : added internet explorer support, fixed firefox tags
# 2019.08.13 v0.14 jul : added firefox support, output format
# 2019.07.11 v0.13 jul : use 5.010, better doc
# 2019.01.14 v0.12 jul : fixed case sensitive regex
# 2018.09.21 v0.11 jul : added arg and -a
# 2018.09.01 v0.10 jul : created

use 5.014;
use strict;
use warnings;
use utf8;
use Getopt::Std;
use File::Basename;
use File::Temp qw(tempdir);
use File::Copy qw(copy);
use open qw(:std :encoding(UTF-8));
use Encode qw(decode_utf8);

our $VERSION = '0.35';
my $program  = basename($0);
my $usage    = <<EOF;

Usage: $program [-hVdas] [-f format] [file ...]

    -h, --help      help
    -V, --version   version
    -d              debug (sent to STDERR)
    -a              all : process arguments and default locations
    -f format       export format : csv, csv-noheader, html, html-raw, or any combination
                    of characters t,u,d as <title> <url> <description> (default : tud)
    -s              find schemeless URLs in text files (default : no)

See `perldoc $program` for full documentation.
EOF

# options

my %options = ();
getopts("hVdaf:s", \%options) or die $usage;

my $help        = $options{h} // 0;
my $version     = $options{V} // 0;
my $debug       = $options{d} // 0;
my $all         = $options{a} // 0;
my $format      = $options{f} // "tud";
my $schemeless  = $options{s} // 0;

die $usage if $help;
die $VERSION . "\n" if $version;

# option -a
if (!@ARGV or $all)
{
	my @default = ();
	
    if ($^O eq "darwin")
    {    
        push @default, glob('~/Library/Safari/Bookmarks.plist');
        push @default, glob('~/Library/Application\ Support/Firefox/Profiles/*.default*/places.sqlite');
        push @default, glob('~/Library/Application\ Support/Google/Chrome/Default/Bookmarks');
    }
    elsif ($^O eq "linux")
    {
        push @default, glob('~/.mozilla/firefox/*.default/places.sqlite');
        push @default, glob('~/.config/google-chrome/Default/Bookmarks');
    }
    elsif ($^O eq "MSWin32")
    {
        push @default, $ENV{APPDATA} . '\Mozilla\Firefox\Profiles\*.default\places.sqlite';
        push @default, $ENV{LOCALAPPDATA} . '\Google\Chrome\User Data\Default\Bookmarks';
        push @default, $ENV{USERPROFILE} . '\Favorites';
        push @default, $ENV{LOCALAPPDATA} . '\Microsoft\Edge\User Data\Default\Bookmarks';
    }
    else
    {
        die "unknown os, unable to set default files";
    }
    
    # do they indeed exist?
	@default = grep { -e $_ } @default;
	
	push @ARGV, @default;
}

# option -f
my %dispatch = (
't'             => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($t);       },
'tu'            => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($t,$u);    },
'tud'           => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($t,$u,$d); },
'tdu'           => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($t,$d,$u); },
'td'            => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($t,$d);    },
'u'             => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($u);       },
'ud'            => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($u,$d);    },
'udt'           => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($u,$d,$t); },
'utd'           => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($u,$t,$d); },
'ut'            => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($u,$t);    },
'd'             => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($d);       },
'du'            => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($d,$u);    },
'dut'           => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($d,$u,$t); },
'dtu'           => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($d,$t,$u); },
'dt'            => sub { my ($t,$u,$d) = @_; say join ' ', grep {defined $_ and length $_} ($d,$t);    },
'csv'           => sub { my ($t,$u,$d) = @_; say '"' . join ('","', map { defined $_ and length $_  ? s/"/""/gr : "" } @_) . '"' . "\r"; },
'csv-noheader'  => sub { my ($t,$u,$d) = @_; say '"' . join ('","', map { defined $_ and length $_  ? s/"/""/gr : "" } @_) . '"' . "\r"; },
'html'          => sub { my ($t,$u,$d) = @_; say '    <DT><A HREF="' . $u . '">' . $t . '</A>'; },
'html-raw'      => sub { my ($t,$u,$d) = @_; say '<A HREF="' . $u . '">' . $t . '</A>'; },
);

# printer function
my $print_bookmark;

if ($dispatch{$format})
{
    $print_bookmark = $dispatch{$format};
}
else
{
    die "unknown format";
}


###############
# SUBROUTINES #
###############

sub _safari {

    my $plist = shift // "";
    warn "\$plist: $plist\n" if $debug;

    # validate plutil and plist
    my $res = `plutil $plist`;
    die "plutil failed : $res" if $res !~ /OK$/;

    # read plist as text
    my $text = `plutil -p $plist`;
    die "plutil failed on file $plist" if not $text;
    
    # split on ddd => {}
    my @pieces = split /\d+ => \{(.*?)\}\s+\d+ => \{/s, $text;
    
    # find bookmarks among pieces
    my @bookmarks = grep /URLString/, @pieces;
    
    # print
    foreach my $bm (@bookmarks)
    {
        my $title       = $1 if $bm =~ /"title" => "(.+)"/i;
        my $url         = $1 if $bm =~ /"URLString" => "(.+)"/i;
        my $description = $1 if $bm =~ /"PreviewText" => "(.+)"/i;
        
        $print_bookmark->($title, $url, $description);
    }
}

sub _firefox {

    eval {
        require DBI;
        require DBD::SQLite;
    };
    if ($@)
    {
        die "to process Firefox bookmarks, you need to install modules DBI DBD::SQLite\n";
    }

    my $dbfile = shift // "";
    warn "\$dbfile: $dbfile\n" if $debug;

    # fix EXCLUSIVE SQLite lock set by Firefox
    my $dir = tempdir( CLEANUP => 1 );
    copy $dbfile, $dir or die "unable to copy file : $dbfile";
    
    # from now on, we use a tmp db copy
    $dbfile = "$dir/" . basename($dbfile);
  
    my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", # DSN: dbi, driver, database file
                           "",                          # no user
                           "",                          # no password
                           { RaiseError => 1, PrintError => 0, AutoCommit => 0 },  # RaiseError=die() PrintError=warn()
                           ) or die DBI->errstr;

    # build sql statement
    my $sql =  "
    select b.title, p.url, t.tags as description
    from moz_bookmarks b
    left join 
    (
        select fk, group_concat(tag, ' ') as tags
        from
        (
            select distinct
            b1.fk as fk,
            b3.title as tag
            from moz_bookmarks b1
            left join moz_bookmarks b2 on b2.fk = b1.fk and b2.type = 1 and b2.title is null
            left join moz_bookmarks b3 on b3.id = b2.parent 
            where b1.type = 1 and b1.title is not null
        )
        group by fk
    ) t on t.fk = b.fk
    left join moz_places p on p.id = b.fk
    left join moz_origins o on o.id = p.origin_id
    where b.title is not null
    and o.prefix != 'place:'
    ";
    warn "\$sql: $sql\n" if $debug;

    # prepare and execute transaction
    eval
    {
        my $sth = $dbh->prepare($sql);
        $sth->execute();

        if ($sth)
        {
            while ($sth and my $hashref = $sth->fetchrow_hashref)
            {
                $print_bookmark->( decode_utf8($hashref->{'title'}), decode_utf8($hashref->{'url'}), decode_utf8($hashref->{'description'}) );
            }
        }     
    };
    
    if ($@)
    {
        warn "transaction failed : $@";
        die  "unable to process file : $dbfile";
    }

    $dbh->disconnect;
}

sub _chrome {

    eval {
        require File::Slurper;
        require JSON;
    };
    if ($@)
    {
        die "to process Chrome bookmarks, you need to install modules File::Slurper JSON\n";
    }

    my $file = shift // "";
    warn "\$file: $file\n" if $debug;

    # read plist as text
    my $text = File::Slurper::read_binary($file);
    
    # decode utf8 json
    my $hashref = JSON::decode_json($text);
    
    # print
    foreach my $place ( ('bookmark_bar','other') )
    {
        my $arrayref = $hashref->{'roots'}->{$place}->{'children'};
    
        foreach my $i (@$arrayref)
        {
            $print_bookmark->($i->{'name'}, $i->{'url'});
        }
    }
}

sub _iexplorer {
    
    eval {
        require Config::Any;
        require Config::Tiny;   # for Config::Any::INI
        require Win32;          # for windows rubbish
        require File::Find;
    };
    if ($@)
    {
        die "to process Internet Explorer favorites, you need to install modules Config::Any Config::Tiny Win32 File::Find\n";
    }
    
    my $favorites = shift // "";
    warn "\$favorites: $favorites\n" if $debug;

    # search in favorites and subfolders
    my @files;
    File::Find::find( { wanted => sub { push @files, $_ }, no_chdir => 1 }, $favorites );

    foreach my $file (@files)
    {
        my @filepaths = ($file);

        # force load internet shortcuts .url as INI files
        my @plugins = ('Config::Any::INI');
        my $cfg = Config::Any->load_files( {files => \@filepaths, force_plugins => \@plugins} );

        # workaround because system encoding != console encoding
        my $win32_old_cp = Win32::GetConsoleOutputCP();
        my $win32_new_cp = Win32::GetACP();
        
        # change console codepage
        Win32::SetConsoleOutputCP($win32_new_cp);

        for (@$cfg)
        {
            my ($filename, $config) = %$_;

            my $title   = substr(basename($filename), 0, -4); # chop ".url"
            my $url     = $config->{'InternetShortcut'}->{'URL'} // "";

            $print_bookmark->($title, $url);
        }

        # restore console codepage
        Win32::SetConsoleOutputCP($win32_old_cp);
    }
}

sub _txt {

    eval {
        require URI::Find;
        require URI::Find::Schemeless;
    };
    if ($@)
    {
        die "to process text files, you need to install module URI::Find\n";
    }

    my $file = shift // "";
    warn "\$file: $file\n" if $debug;

    # get uri regex
    my $class = $schemeless ? "URI::Find::Schemeless" : "URI::Find";    # copy-paste from urifind
    my $finder = $class->new( sub {
        my ($uri, $orig_uri) = @_;
        return $orig_uri;
    });

    my $regex = $finder->uri_re;
    $regex = $regex . '|' . $finder->schemeless_uri_re if $schemeless;

    # read file as text
	my $fh;
	if ($file eq '-')
	{
	    $fh = *STDIN;
	}
	else
	{
		open($fh, '<:encoding(UTF-8)', $file) or die "unable to read file : $file";
 	}

    while (my $line = <$fh>)
    {
        if ( $line =~ /(?:(.*)\s)?($regex)(?:\s+(.*))?/ ) # match <title> <url> <description>
        {
            my $title       = $1;
            my $url         = $2;
            my $description = $3;

            $print_bookmark->($title, $url, $description);
        }   
    }
}

sub _gemini {

    eval {
        require URI::Find;
        require URI::Find::Schemeless;
    };
    if ($@)
    {
        die "to process Gemini files, you need to install module URI::Find\n";
    }

    my $file = shift // "";
    warn "\$file: $file\n" if $debug;

    # get uri regex
    my $class = $schemeless ? "URI::Find::Schemeless" : "URI::Find";    # copy-paste from urifind
    my $finder = $class->new( sub {
        my ($uri, $orig_uri) = @_;
        return $orig_uri;
    });

    my $regex = $finder->uri_re;
    $regex = $regex . '|' . $finder->schemeless_uri_re if $schemeless;

    # read file as text
    open(my $fh, '<:encoding(UTF-8)', $file) or die "unable to read file : $file";
 
    while (my $line = <$fh>)
    {
        if ( $line =~ /^=>\s+($regex)\s+(.*)/ )    # match => <url> <title>
        {
            my $title       = $2;
			my $url         = $1;
            my $description = undef;

            $print_bookmark->($title, $url, $description);
        }   
    }
}

sub _md {

    my $file = shift // "";
    warn "\$file: $file\n" if $debug;

    # read file as text
    open(my $fh, '<:encoding(UTF-8)', $file) or die "unable to read file : $file";

    while (my $line = <$fh>)
    {
		# regex by MichaÃ«l Perrin :
		# http://blog.michaelperrin.fr/2019/02/04/advanced-regular-expressions/
        if ( $line =~					
		/								
		(?<text_group>                  # Text group, including square brackets
		  \[
		    (?>                         # (?> defines an atomic group, this is a performance improvement when using recursion
		      [^\[\]]+                  # Look for any char except closing square bracket
		      |(?&text_group)           # OR: find recursively an other pattern with opening and closing square brackets
		    )*
		  \]
		)
		(?:
		  \(
		    (?<url>\S*?)                # URL: non-greedy non-whitespace characters
		    (?:
		      [ ]
		      "
		        (?<title>
		          (?:[^"]|(?<=\\)")*?   # Title without double quotes around
		        )
		      "
		    )?
		  \)
		)
		/x
		)    # match [<title>](<url> "<description>") OLD was [<title>](<url>) <description>
        {
            my $title       = $1;
            my $url         = $2;
            my $description = $3;
        
			$title =~ s/^\[|\]$//g; # strip [...]
		
            $print_bookmark->($title, $url, $description);
        }
    }
}

sub _netscape {

    eval {
        require Netscape::Bookmarks;
    };
    if ($@)
    {
        die "to process Netscape files, you need to install module Netscape::Bookmarks\n";
    }

    my $file = shift // "";
    warn "\$file: $file\n" if $debug;

	# parse file
	my $netscape = Netscape::Bookmarks->new($file);
	die "unable to parse file : $file" if not $netscape->isa('Netscape::Bookmarks::Category');

	my $callback = sub {
		my ($object, $level) = @_;
		if ($object->isa('Netscape::Bookmarks::Link'))
		{
            my $title       = $object->title;
			my $url         = $object->href;
            my $description = undef;
			
			$print_bookmark->($title, $url, $description);
		}
	};

	$netscape->recurse($callback);
}


########
# MAIN #
########

# header
if ($format eq 'csv')
{
    say '"Title","URL","Description"' . "\r";
}
elsif ($format eq 'html')
{
	say "<!DOCTYPE NETSCAPE-Bookmark-file-1>
    <!--This is an automatically generated file.
    It will be read and overwritten.
    Do Not Edit! -->
    <Title>Bookmarks</Title>
    <H1>Bookmarks</H1>
    <DL>";
}

# body
foreach my $file (@ARGV)
{
    my $name = basename($file);

    if    (-f $file and $name =~ /\.plist$/)   { _safari($file);    }
    elsif (-f $file and $name =~ /\.sqlite$/)  { _firefox($file);   }
    elsif (-f $file and $name =~ /Bookmarks$/) { _chrome($file);    }
    elsif (-d $file and $name =~ /Favorites$/) { _iexplorer($file); }
    elsif (-f $file and $name =~ /\.md$/)      { _md($file);        }
    elsif (-f $file and $name =~ /\.gmi$/)     { _gemini($file);    }
    elsif (-f $file and $name =~ /\.html$/)    { _netscape($file);  }
    elsif (-f $file )                          { _txt($file);       } 
    elsif ( $file eq '-' )                     { _txt($file);       }
    else  { die "unable to process file : $file"; }
}

# footer
if ($format eq 'html')
{
	print "    </DL>";
}

exit 0;

__END__

=head1 NAME

bookmarks - Export bookmarks from browsers and files.

=head1 SYNOPSIS

    $ bookmarks [-hVda] [-f format] [file ...]

    -h, --help      help
    -V, --version   version
    -d              debug (sent to STDERR)
    -a              all : process arguments and default locations
    -f format       export format : csv, csv-noheader, html, html-raw, or any combination
                    of characters t,u,d as <title> <url> <description> (default : tud)
    -s              find schemeless URLs in text files (default : no)

=head1 DESCRIPTION

bookmarks is a tool to export bookmarks from files supplied as arguments.
Without arguments, or with option -a, bookmarks will attempt to read files from browsers default locations.
If file is a dash "-", STDIN is read and processed as plain text source. 

=head2 Supported sources :

=over

=item - Safari (*.plist)

=item - Firefox (*.sqlite)

=item - Chrome and Edge (*Bookmarks)

=item - Internet Explorer (*Favorites)

=item - Netscape (*.html)

=item - Markdown (*.md)

=item - Gemini (*.gmi)

=item - Surfraw (same as plain text)

=item - Plain text (any other extension)

=back

Markdown, Gemini and plain text files are processed line by line (as UTF-8) :

    [markdown example](http://example.md/ "with description")
    => gemini://example.gmi gemini example
    plain text example http://example.txt with description

=head2 Supported fields :

=over
 
=item - <title> is the name, alias or title.

=item - <url> is the address, URL or URI.

=item - <description> is only supported for Safari 'Description', Firefox 'Tags' and Markdown 'Title' (just the tooltip, actually).

=back

=head2 Output format :

By default, fields <title> <url> <description> are exported as plain text. This can be changed by using option -f and specifying any combination of characters t,u,d.
Other possible values :

=over

=item - csv : Comma-separated values with double-quotes and CR NL (RFC 4180).

=item - csv-noheader : same as above, without header line.

=item - html : Netscape Bookmarks File Format.

=item - html-raw : raw list of HTML <A> elements.

=back

=head1 BUGS

Please report any bugs or feature requests to C<kaldor@cpan.org>, or through
the web interface at L<https://github.com/kal247/App-bookmarks	/issues>.

=head1 AUTHOR

jul, C<kaldor@cpan.org>

=head1 LICENSE AND COPYRIGHT

This software is Copyright (c) 2019-2025 by jul.

This is free software, licensed under:

  The Artistic License 2.0 (GPL Compatible)
